%% ps5 
clear all; clc;

% first, make sure your current directory is where this script is
% then add to path all functions essential to this project
addpath(genpath('../utilities'));  


%% 1 Lucas Kanade optical flow
% read images
clc;
Shift0 = double(imread('input/TestSeq/Shift0.png'))/255;
ShiftR2 = double(imread('input/TestSeq/ShiftR2.png'))/255;
ShiftR10 = double(imread('input/TestSeq/ShiftR10.png'))/255;
ShiftR20 = double(imread('input/TestSeq/ShiftR20.png'))/255;
ShiftR40 = double(imread('input/TestSeq/ShiftR40.png'))/255;
ShiftR5U5 = double(imread('input/TestSeq/ShiftR5U5.png'))/255;


%% 1a compare base-ShiftR2 and base-Shift2U5

[Ix, Iy] = gaussian_gradient(Shift0, 15, 1);
It_R2 = ShiftR2 - Shift0;

h_R5U5 = fspecial('gauss',15, 1);

Shift0_fil = imfilter(Shift0, h_R5U5);
ShiftR5U5_fil = imfilter(ShiftR5U5, h_R5U5);

It_R5U5 = ShiftR5U5_fil - Shift0_fil ;
ccc = gcf;
delete(ccc.Children);

figure(1);
vl_tightsubplot(2,3,1);
imshow(Shift0)
vl_tightsubplot(2,3,2);
imshow(ShiftR2)
vl_tightsubplot(2,3,3);
imshow(ShiftR5U5)

vl_tightsubplot(2,3,4);
imshow(normalise_img(U_R2))
vl_tightsubplot(2,3,5);
imshow(normalise_img(It_R2))
vl_tightsubplot(2,3,6);
imshow(normalise_img(It_R5U5))

h1 = fspecial('gauss', 25, 9);
[U_R2, V_R2] = solve_LK_flow(Ix,Iy,It_R2,h1);
[U_R5U5, V_R5U5] = solve_LK_flow(Ix,Iy,It_R5U5,h1);

ccc = gcf;
delete(ccc.Children);
plot_optical_flow_displacement(2,U_R2,V_R2)
print(gcf, '-dpng', './output/ps5-1-a-1.png')

ccc = gcf;
delete(ccc.Children);
H = plot_optical_flow_displacement(2,U_R5U5,V_R5U5);
print(gcf, '-dpng', './output/ps5-1-a-2.png')


%% 1b compare 

ShiftR10_fil = imfilter(ShiftR10, h_R5U5);
ShiftR20_fil = imfilter(ShiftR20, h_R5U5);
ShiftR40_fil = imfilter(ShiftR40, h_R5U5);

It_R10 = ShiftR10_fil - Shift0_fil ;
It_R20 = ShiftR20_fil - Shift0_fil ;
It_R40 = ShiftR40_fil - Shift0_fil ;

[U_R10, V_R10] = solve_LK_flow(Ix,Iy,It_R10,h1);
ccc = gcf;
delete(ccc.Children);
plot_optical_flow_displacement(2,U_R10,V_R10)
print(gcf, '-dpng', './output/ps5-1-b-1.png')


[U_R20, V_R20] = solve_LK_flow(Ix,Iy,It_R20,h1);
ccc = gcf;
delete(ccc.Children);
plot_optical_flow_displacement(2,U_R20,V_R20)
print(gcf, '-dpng', './output/ps5-1-b-2.png')


[U_R40, V_R40] = solve_LK_flow(Ix,Iy,It_R40,h1);
ccc = gcf;
delete(ccc.Children);
plot_optical_flow_displacement(2,U_R40,V_R40)
print(gcf, '-dpng', './output/ps5-1-b-3.png')


%% 2a

clc
yos_1 = double(imread('input/DataSeq1/yos_img_01.jpg'))/255;
yos_2 = double(imread('input/DataSeq1/yos_img_02.jpg'))/255;
yos_3 = double(imread('input/DataSeq1/yos_img_03.jpg'))/255;

ccc = gcf;
delete(ccc.Children);
figure(3);
vl_tightsubplot(1,3,1);
imshow(yos_1)
vl_tightsubplot(1,3,2);
imshow(yos_2)
vl_tightsubplot(1,3,3);
imshow(yos_3)

% although it is called "Gaussian pyramid", the kernel introduced by Burt
% and Adelson is actually not a Gaussian function. 
a = 0.4;
c = (0.5-a)/2;
b = (a+2*c)/2;
h = [c b a b c];

[g0,g1,g2,g3] = REDUCE_4_levels(yos_1,h);

ccc = gcf;
delete(ccc.Children);
figure(4);

vl_tightsubplot(1,4,1);
imshow(g0)
vl_tightsubplot(1,4,2);
imshow(g1)
vl_tightsubplot(1,4,3);
imshow(g2)
vl_tightsubplot(1,4,4);
imshow(g3)

print(gcf, '-dpng', './output/ps5-2-a-1.png')

%%
temp = (size(yos_1)-1)
for i = 1:4
    temp = (temp+1)/2
end

%% 2b

% W = h'*h;
% h_L = size(W,1);
% h_halfL = (h_L-1)/2;
% 
% g3_1 = zeros(size(g2));
% for i = 1:size(g3_1,1)
%     for j = 1:size(g3_1,2)
%         for m = -h_halfL:h_halfL 
%             for n = -h_halfL:h_halfL 
%                 ind_m = (i-m)/2;
%                 ind_n = (j-n)/2;
%                 if (mod(ind_m,1)==0) && (mod(ind_n,1)==0) && (ind_m>0) && (ind_n>0)
%                     w = W(m+(h_L+1)/2,n+(h_L+1)/2);
%                     g3_1(i,j) = g3_1(i,j)+ 4*w.*g3(ind_m,ind_n);
%                 end
%             end
%         end
%     end
% end
g3_1 = EXPAND_1_level(g3,h);
L2 = g2 - g3_1;
g2_1 = EXPAND_1_level(g2,h);
L1 = g1 - g2_1;
g1_1 = EXPAND_1_level(g1,h);
L0 = g0 - g1_1;

ccc = gcf;
delete(ccc.Children);
figure(4);

vl_tightsubplot(1,4,1);
imshow(g3)
vl_tightsubplot(1,4,2);
imshow(L2)
vl_tightsubplot(1,4,3);
imshow(L1)
vl_tightsubplot(1,4,4);
imshow(L0)



























