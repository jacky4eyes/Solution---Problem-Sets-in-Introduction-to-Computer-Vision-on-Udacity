%%  compare patches against the template to get each particle's new weight 
% this function uses mean shift method based on histograms of patches
% the template size decides the patch size
% S contains the particles' states. In this case, they are (x, y) locations
%
% w_arr = calc_particle_weights_2(template, img, S, sigma_MSE)
function w_arr = mean_shift_tracking(template, img, S, num_of_bins)

    % size-related variables
    n = size(template,1);
    m = size(template,2);
    N = size(S,1);
    bins = 0:1/num_of_bins:1;   
    w_arr = zeros([N 1]); % the weight collector for this round
    
    h_template_R = zeros([num_of_bins 1]);
    h_template_G = zeros([num_of_bins 1]);
    h_template_B = zeros([num_of_bins 1]);
    
    for b = 1:size(bins)-1
        h_template_R(b) = mean(mean(template(:,:,1)>=bins(b))&(template(:,:,1)<bins(b+1)));
        h_template_G(b) = mean(mean(template(:,:,2)>=bins(b))&(template(:,:,2)<bins(b+1)));
        h_template_B(b) = mean(mean(template(:,:,3)>=bins(b))&(template(:,:,3)<bins(b+1)));
    end

    for i = 1:N
        u_p = S(i,1);   
        v_p = S(i,2);
        patch = img(v_p-(n-1)/2:v_p+(n-1)/2, u_p-(m-1)/2:u_p+(m-1)/2,:);   

        h_patch_R = zeros([num_of_bins 1]);
        h_patch_G = zeros([num_of_bins 1]);
        h_patch_B = zeros([num_of_bins 1]);

        for b = 1:size(bins)-1
            h_patch_R(b) = mean(mean(patch(:,:,1)>=bins(b))&(patch(:,:,1)<bins(b+1)));
            h_patch_G(b) = mean(mean(patch(:,:,2)>=bins(b))&(patch(:,:,2)<bins(b+1)));
            h_patch_B(b) = mean(mean(patch(:,:,3)>=bins(b))&(patch(:,:,3)<bins(b+1)));
        end
    
        

%         mse_RGB = reshape(mse_RGB,[3 1]);
        likelihood_RGB = exp(-mse_RGB./(2.*sigma_MSE.^2));
        
        % combine likelihoods; still experimenting with different methods
        likelihood = norm(likelihood_RGB, 2)/3;
%         likelihood = likelihood_RGB(1)*likelihood_RGB(2)*likelihood_RGB(3);
%         likelihood = likelihood_RGB(1)+likelihood_RGB(2)+likelihood_RGB(3);

        % additional bonus from the count of skin pixels (default is q=0)
        skin_percentage = sum(sum(patch_skin_mask_R&patch_skin_mask_G&patch_skin_mask_B))/m/n;
        bonus = q*skin_percentage;
        likelihood = likelihood*(1 + bonus);
                
        w_arr(i) = likelihood;
        
    end
    [skin_percentage  max(w_arr)]
    w_arr = w_arr./norm(w_arr,1);  % normalisation
    
end